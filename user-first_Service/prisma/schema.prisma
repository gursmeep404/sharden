generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar(50)
  users Users[]

  @@map("roles")
}

model Users {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String    @unique @db.VarChar(255)
  password_hash String
  name          String?   @db.VarChar(100)
  role_id       Int
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  role          Role      @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("users")
}

model BankData {
  id            Int       @id @default(autoincrement())
  userId        String    @map("user_id") @db.Uuid
  name          String
  email         String
  password      String
  accountNumber String    @unique @map("account_number") @db.VarChar(20)
  panNumber     String    @unique @map("pan_number") @db.VarChar(10)
  cardNumber    String    @unique @map("card_number") @db.VarChar(19)
  spendLimit    Decimal?  @default(0) @map("spend_limit") @db.Decimal(12, 2)
  balance       Decimal   @default(0) @db.Decimal(12, 2)
  phoneNumber   String?   @map("phone_number") @db.VarChar(15)
  securityId    String?   @map("security_id")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("bank_data")
}

model file_audit_log {
  id           Int           @id @default(autoincrement())
  file_id      String?       @db.Uuid
  action       String?       @db.VarChar(50)
  status       String?       @db.VarChar(20)
  details      String?
  timestamp    DateTime?     @default(now()) @db.Timestamp(6)
  secure_files secure_files? @relation(fields: [file_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model secure_files {
  id                String           @id @db.Uuid
  original_filename String           @db.VarChar(255)
  storage_path      String
  mime_type         String?          @db.VarChar(255)
  sender_email      String           @db.VarChar(255)
  recipient_email   String           @db.VarChar(255)
  expiry_time       DateTime         @db.Timestamptz(6)
  revoked           Boolean?
  e2e               Boolean?
  iv_b64            String?
  legacy_key_b64    String?
  encrypted_size    Int?
  created_at        DateTime?        @default(now()) @db.Timestamp(6)
  updated_at        DateTime?        @default(now()) @db.Timestamp(6)
  file_audit_log    file_audit_log[]
}

model vendor_requests {
  id                   BigInt    @id @default(autoincrement())
  vendor_name          String    @db.VarChar(255)
  vendor_email         String    @unique @db.VarChar(255)
  vendor_password      String    @db.VarChar(255)
  vendor_documentation String    @db.VarChar(255)
  created_at           DateTime  @default(now()) @db.Timestamp(6)
  updated_at           DateTime? @default(now()) @db.Timestamp(6)

  @@map("vendor_requests")
}

model verified_vendors {
  id                 BigInt               @id @default(autoincrement())
  vendor_name        String               @db.VarChar(255)
  vendor_email       String               @unique @db.VarChar(255)
  vendor_password    String               @db.VarChar(255)
  vendor_token       String               @unique @db.VarChar(255)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  sessions           sessions[]
  vendor_permissions vendor_permissions[]

  @@map("verified_vendors")
}

model access_logs {
  id            BigInt   @id @default(autoincrement())
  session_id    String   @db.VarChar(255)
  user_email    String   @db.VarChar(255)
  vendor_name   String   @db.VarChar(255)
  facility_used String   @db.VarChar(100)
  access_time   DateTime @default(now()) @db.Timestamp(6)
  status        String   @default("success") @db.VarChar(20)

  @@map("access_logs")
}

model sessions {
  id               BigInt           @id @default(autoincrement())
  session_id       String           @unique @db.VarChar(255)
  user_id          String           @db.Uuid
  vendor_id        BigInt
  session_token    String           @db.VarChar(500)
  expires_at       DateTime         @db.Timestamp(6)
  is_active        Boolean          @default(true)
  revoked_by       String?          @db.VarChar(255)
  revoked_at       DateTime?        @db.Timestamp(6)
  created_at       DateTime         @default(now()) @db.Timestamp(6)
  verified_vendors verified_vendors @relation(fields: [vendor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sessions_vendor_id")

  @@map("sessions")
}

model vendor_permissions {
  id               BigInt           @id @default(autoincrement())
  vendor_id        BigInt
  endpoint_name    String           @db.VarChar(100)
  has_access       Boolean          @default(false)
  created_at       DateTime         @default(now()) @db.Timestamp(6)
  updated_at       DateTime?        @default(now()) @db.Timestamp(6)
  verified_vendors verified_vendors @relation(fields: [vendor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vendor_permissions_vendor_id")

  @@unique([vendor_id, endpoint_name], map: "uk_vendor_permissions_vendor_endpoint")
  @@map("vendor_permissions")
}
